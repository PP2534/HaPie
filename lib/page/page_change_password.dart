import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:hapie/controller/auth_controller.dart';
import 'package:hapie/controller/layout_app_controller.dart';
import 'package:hapie/page/page_layout_app.dart';
import 'package:hapie/helper/layout_check_internet.dart';
import 'package:hapie/page/page_check_auth.dart';
import 'package:hapie/widgets/widget_function.dart';

class PageChangePassword extends StatelessWidget {
  bool reset;
  PageChangePassword({super.key, this.reset = false});

  @override
  Widget build(BuildContext context) {
    TextEditingController txtNewPassword = TextEditingController();
    TextEditingController txtRNewPassword = TextEditingController();
    TextEditingController txtOldPassword = TextEditingController();
    return LayoutCheckInternet(
        child: GetBuilder(
          init: AuthController.get(),
          id: "auth",
          builder: (controller) {
            final _formKey = GlobalKey<FormState>();
            return Scaffold(
              appBar: AppBar(
                title: Text((reset?"ƒê·∫∑t m·∫≠t kh·∫©u m·ªõi":"Thay ƒë·ªïi m·∫≠t kh·∫©u"), style: TextStyle(
                    fontSize: 20, fontWeight: FontWeight.bold
                ),),
                // backgroundColor: Theme.of(context).colorScheme.inversePrimary,
              ),
              body: Center(
                child: Container(
                  child: Padding(
                    padding: EdgeInsets.only(left: 20, right: 20),
                    child: Form(
                      key: _formKey,
                      child: Column(
                        // mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          if(!reset)SizedBox(height: 20,),
                          if(!reset)TextFormField(
                            controller: txtOldPassword,
                            decoration: InputDecoration(
                              labelText: "M·∫≠t kh·∫©u hi·ªán t·∫°i",
                              hintText: "Nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i...",
                              suffixIcon: IconButton(
                                  onPressed: () {
                                    controller.changeHienThiPassword();
                                  },
                                  icon: Icon(controller.hienPassword?Icons.visibility:Icons.visibility_off)
                              ),
                            ),
                            validator: (value) {
                              if(value == null || value.trim().isEmpty){
                                return "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u";
                              }
                              if(value.length <6){
                                return "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u √≠t nh·∫•t 6 k√Ω t·ª±";
                              }
                              return null;
                            },
                            autovalidateMode: AutovalidateMode.onUserInteraction,
                            obscureText: !controller.hienPassword,
                            keyboardType: TextInputType.visiblePassword,
                          ),
                          SizedBox(height: 20,),
                          TextFormField(
                            controller: txtNewPassword,
                            decoration: InputDecoration(
                              labelText: "M·∫≠t kh·∫©u m·ªõi",
                              hintText: "Nh·∫≠p m·∫≠t kh·∫©u m·ªõi....",
                              suffixIcon: IconButton(
                                  onPressed: () {
                                    controller.changeHienThiPassword();
                                  },
                                  icon: Icon(controller.hienPassword?Icons.visibility:Icons.visibility_off)
                              ),
                            ),
                            validator: (value) {
                              if(value == null || value.trim().isEmpty){
                                return "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u";
                              }
                              if(value.length <6){
                                return "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u √≠t nh·∫•t 6 k√Ω t·ª±";
                              }
                              return null;
                            },
                            autovalidateMode: AutovalidateMode.onUserInteraction,
                            obscureText: !controller.hienPassword,
                            keyboardType: TextInputType.visiblePassword,
                          ),
                          SizedBox(height: 20,),
                          TextFormField(
                            controller: txtRNewPassword,
                            decoration: InputDecoration(
                              labelText: "X√°c nh·∫≠n m·∫≠t kh·∫©u",
                              hintText: "Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi....",
                              suffixIcon: IconButton(
                                  onPressed: () {
                                    controller.changeHienThiPassword();
                                  },
                                  icon: Icon(controller.hienPassword?Icons.visibility:Icons.visibility_off)
                              ),
                            ),
                            validator: (value) {
                              if(value == null || value.trim().isEmpty){
                                return "Vui l√≤ng nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi";
                              }
                              if(value != txtNewPassword.text){
                                return "M·∫≠t kh·∫©u kh√¥ng tr√πng kh·ªõp!";
                              }
                              return null;
                            },
                            autovalidateMode: AutovalidateMode.onUserInteraction,
                            obscureText: !controller.hienPassword,
                            keyboardType: TextInputType.visiblePassword,
                          ),
                          // SizedBox(height: 50,),
                          Spacer(),
                          controller.isLoading?CircularProgressIndicator():
                          ElevatedButton(
                              onPressed: () async{
                                if (_formKey.currentState!.validate()) {
                                  String? kq = await controller.updatePassword(txtNewPassword.text.trim(),reset: reset, oldPassword: txtOldPassword.text.trim());
                                  if(kq=="ok"){
                                    await showConfirmDialogOneButtonSuccess(context, "C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi th√†nh c√¥ng!", title: "Ho√†n th√†nh", buttonText: "Ch·∫•p nh·∫≠n", );
                                    Get.offAll(PageCheckAuth(xacthuc: true,));
                                  }
                                  else if(kq=="no_log_in"){
                                    Get.offAll(PageCheckAuth(xacthuc: true,));
                                  }
                                  else if(kq=="current_password_wrong"){
                                    await showConfirmDialogOneButtonFailed(context, "M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng", title: "Th·∫•t b·∫°i", buttonText: "Th·ª≠ l·∫°i", );
                                  }
                                  else if(kq=="same_password"){
                                    if(reset){
                                      await showConfirmDialogOneButtonWarning(context, "M·∫≠t kh·∫©u m·ªõi b·∫°n v·ª´a nh·∫≠p l√† m·∫≠t kh·∫©u c≈©, ch√∫c m·ª´ng b·∫°n ƒë√£ nh·ªõ l·∫°i m·∫≠t kh·∫©u ü§°.", title: "Th√¥ng b√°o", buttonText: "ƒê·ªìng √Ω", );
                                      Get.offAll(LayoutApp(), binding: LayoutAppBinding());
                                    }else{
                                      await showConfirmDialogOneButtonFailed(context, "M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒëu·ª£c gi·ªëng m·∫≠t kh·∫©u c≈©.", title: "Th√¥ng b√°o", buttonText: "Th·ª≠ l·∫°i", );
                                    }

                                  }
                                  else{
                                    await showConfirmDialogOneButtonFailed(context, "ƒê√£ c√≥ l·ªói ${kq}", title: "Th·∫•t b·∫°i", buttonText: "Th·ª≠ l·∫°i", );
                                  }
                                }
                              },
                              child: Text("X√°c nh·∫≠n", style: TextStyle(
                                  fontSize: 20
                              ),)
                          ),
                          SizedBox(height: 20,),
                        ],
                      ),
                    ),
                  ),
                ),
              ),
            );
          },

        )
    );
  }
}
